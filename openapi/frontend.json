{
  "openapi": "3.0.3",
  "info": {
    "title": "CakeAuth Frontend API",
    "description": "OpenAPI documentation for interacting with CakeAuth Frontend APIs",
    "version": "0.1.0",
    "contact": {
      "name": "CakeAuth team",
      "email": "team@cakeauth.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://github.com/cakeauth/openapi/LICENSE"
    }
  },
  "security": [{ "AccessTokenAuth": [] }],
  "servers": [
    {
      "url": "https://{host}.live.cakeauth.app",
      "description": "Production environment host URL",
      "variables": {
        "host": {
          "description": "Subdomain for your the production environment host",
          "default": "example"
        }
      }
    },
    {
      "url": "https://{host}.test.cakeauth.app",
      "description": "Development environment host URL",
      "variables": {
        "host": {
          "description": "Subdomain for your development environment host",
          "default": "example"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Me",
      "description": "Use this set of endpoints to interact with **currently authorized** user."
    },
    {
      "name": "OAuth",
      "description": "Set of endpoint for OAuth callback. Read more about OAuth process [here](/docs/concepts/how-it-works/oauth#how-it-works), and learn to set it up [here](/docs/guides/oauth/overview)."
    },
    {
      "name": "Reset Password",
      "description": "Use this set of endpoints for the **unauthenticated/anonymous** password reset process. Learn more about password reset process, [here](/docs/guides/reset-password)."
    },
    {
      "name": "Sessions",
      "description": "A session is is a temporary state that keeps a user authenticated after they authenticate. Use this set of endpoints to manage sessions for users and its identifiers."
    },
    {
      "name": "Settings",
      "description": "Use this set of endpoints to interact with current environment settings. Read more about environment, [here](/docs/concepts/structure#3-environments)."
    },
    {
      "name": "Sign In",
      "description": "Use this set of endpoints for the **unauthenticated/anonymous** signin process. Learn more about authentication process, [here](/docs/concepts/how-it-works/authentication)."
    },
    {
      "name": "Sign Up",
      "description": "Use this set of endpoints for the **unauthenticated/anonymous** registration process. Learn more about authentication process, [here](/docs/concepts/how-it-works/authentication)."
    },
    {
      "name": "General",
      "description": "General API endpoints"
    }
  ],
  "paths": {
    "/ping": {
      "get": {
        "tags": ["General"],
        "security": [{ "NoAuth": [] }],
        "summary": "Ping-pong",
        "description": "Ping your environment instance",
        "operationId": "getPing",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "text/plain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pong response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "pong"
              }
            }
          },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/.well-known/jwks.json": {
      "get": {
        "tags": ["General"],
        "security": [{ "NoAuth": [] }],
        "summary": "Get JWKS Keys",
        "description": "Retrieve list of dedicated JWKS keys for current environment. Learn more about JWKS keys, [here](/docs/concepts/signature).",
        "operationId": "getJWKS",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return  list of JWKS keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetJWKSResponseItem"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/me": {
      "get": {
        "tags": ["Me"],
        "summary": "Get Current User Details",
        "description": "Retrieve a detailed data for current authorized users",
        "operationId": "getMe",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A detailed user's data",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/GetMeResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/me/reset_password": {
      "post": {
        "tags": ["Me"],
        "description": "Reset password for currently authenticated user's identifiers (`is_current=true`). If you want to **set** a password to a user which no password data previously available (`is_password_enabled=false`), use the [password reset flow](docs/guides/reset-password) instead.",
        "summary": "Reset Current User's Password",
        "operationId": "postMeResetPassword",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMeResetPasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostMeResetPasswordResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/oauth/callback": {
      "get": {
        "tags": ["OAuth"],
        "summary": "OAuth Callback",
        "description": "Callback endpoints for OAuth process. This endpoint exchange code from AOuth providers with access & session token. Read more about OAuth process, [here](/docs/concepts/how-it-works/oauth).",
        "operationId": "getClientsOAuthCallback",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "text/plain"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string",
              "format": "oauth_callback_code",
              "example": "123123123"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "format": "OAuthState",
              "description": "[Encoded form](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) of [`OAuthState` type](/sdk/types#oauthstate)."
            },
            "required": true
          }
        ],
        "responses": {
          "301": {
            "description": "OAuth callback redirected succesfully",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "example": "https://example.com"
              }
            },
            "content": {
              "text/plain": {
                "schema": {}
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/reset_password/attempts": {
      "post": {
        "tags": ["Reset Password"],
        "security": [{ "NoAuth": [] }],
        "description": "Create a reset password request for **authenticated/anonymous** users. Learn more about password reset attempt process, [here](/docs/guides/reset-password#anonymousunauthenticated)",
        "summary": "Create a Reset Password Attempt",
        "operationId": "postMeResetPassword",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAttemptResetPasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset attempt created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostAttemptResetPasswordResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/reset_password/attempts/{attempt_id}/verify": {
      "post": {
        "tags": ["Reset Password"],
        "security": [{ "NoAuth": [] }],
        "description": "Verify a reset password request (by **authenticated/anonymous** users). Learn more about password reset attempt process, [here](/docs/guides/reset-password#anonymousunauthenticated)",
        "summary": "Verify a Reset Password Attempt",
        "operationId": "postVerifyResetPasswordAttempt",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "path",
            "name": "attempt_id",
            "schema": {
              "type": "string",
              "format": "id",
              "example": "atm_p2n21pe9filh8v5o98nja9j5zdtrkdfr"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostVerifyResetPasswordAttemptBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password resetted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostVerifyResetPasswordAttemptResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/sessions": {
      "get": {
        "tags": ["Sessions"],
        "summary": "List Sessions",
        "description": "Retrieve a paginated list of sessions for currently authanticated user",
        "operationId": "getSessions",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "example": 1,
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Pagination data size",
            "example": 10,
            "required": false,
            "schema": {
              "type": "number",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Comma-separated filter. Accepts the [session's `status` types](#/reference/model/accessslientUserssessionsstatus)",
            "example": "active,revoked",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetSessionsResponseItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/sessions/details": {
      "get": {
        "tags": ["Sessions"],
        "summary": "Get Current Session Details",
        "description": "Retrieve details about currently active session",
        "operationId": "getSessionDetails",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Details of current session",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/GetSessionDetailsResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/sessions/handshake/{handshake_token}": {
      "get": {
        "tags": ["Sessions"],
        "summary": "Handshake Token Exchange",
        "description": "Exchange a handshake token from [OAuth process](/docs/concepts/how-it-works/oauth) with [access token and session token](/docs/concepts/how-it-works/token-refresh#access-token).",
        "operationId": "getHandshakeSession",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "path",
            "name": "handshake_token",
            "schema": {
              "type": "string",
              "format": "id",
              "example": "tok_p2n21pe9filh8v5o98nja9j5zdtrkdfr"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Details of current session",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/GetHandshakeSessionResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/sessions/tokens": {
      "post": {
        "tags": ["Sessions"],
        "description": "Refresh access token for currently active session. Learn more about sessions refresh mechanism, [here](/docs/concepts/how-it-works/token-refresh).",
        "summary": "Refresh Current Access Token",
        "operationId": "postRefreshSessionToken",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmptyObject" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostRefreshAccessTokenResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/sessions/revoke": {
      "post": {
        "tags": ["Sessions"],
        "description": "Revoke currently active session. The session's `status` will be changed to `revoked` and session is not valid and cannot be refreshed and/or used anymore.",
        "summary": "Revoke Current Session",
        "operationId": "postRevokeSession",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmptyObject" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session's revoked",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostRevokeSessionResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/settings": {
      "get": {
        "tags": ["Settings"],
        "summary": "Get Environment Settings",
        "description": "Retrieve a detailed data for current environment settings/configurations.",
        "operationId": "getSettings",
        "security": [{ "NoAuth": [] }],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A detailed environment's settings data",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/GetSettingsResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/signin/strategies": {
      "post": {
        "tags": ["Sign In"],
        "description": "Get available signin strategies for a given [direct identifier](/docs/guides/direct/overview). This can be use for a system where multiple authentication strategies is used. If your environment only allows signin strategies, you don't need to call this API. You can directly [create a new signin attempt](#/tag/sign-in/POST/v1/signin/attempts).",
        "summary": "Check Signin Strategies",
        "operationId": "postGetAvailableSigninStrategies",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostGetAvailableSigninStrategiesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in strategies returned",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostGetAvailableSigninStrategiesResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/signin/attempts": {
      "post": {
        "tags": ["Sign In"],
        "description": "Create an attempt to signin/authenticate for existing user.",
        "summary": "Create Signin Attempt",
        "operationId": "postAttemptSignin",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAttemptSigninBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in attempt created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostAttemptSigninResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/signin/attempts/{attempt_id}/verify": {
      "post": {
        "tags": ["Sign In"],
        "description": "Verify a signin attempt with chosen authentication strategy.",
        "summary": "Verify Signin Attempt",
        "operationId": "postVerifySigninAttempt",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "path",
            "name": "attempt_id",
            "schema": {
              "type": "string",
              "format": "id",
              "example": "atm_p2n21pe9filh8v5o98nja9j5zdtrkdfr"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostVerifySigninAttemptBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in attempt verified",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostVerifySigninAttemptResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/signup/attempts": {
      "post": {
        "tags": ["Sign Up"],
        "description": "Create an attempt to signup/register for a new user. **Important**: If you set the [`verify_on_signup=false`](/docs/guides/direct/email#verify-on-signup) in your environment settings, this endpoint will automatically create a new user (see `is_user_created=true` flag). If it requires to verify on signup, an attempt will be created (see `is_user_created=false` flag).",
        "summary": "Create Signup Attempt",
        "operationId": "postAttemptSignup",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAttemptSignupBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in attempt created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostAttemptSignupResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/signup/attempts/{attempt_id}/verify": {
      "post": {
        "tags": ["Sign Up"],
        "description": "Verify a signup attempt with chosen authentication strategy.",
        "summary": "Verify Signup Attempt",
        "operationId": "postVerifySignupAttempt",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "in": "path",
            "name": "attempt_id",
            "schema": {
              "type": "string",
              "format": "id",
              "example": "atm_p2n21pe9filh8v5o98nja9j5zdtrkdfr"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-cakeauth-public-key",
            "schema": {
              "type": "string",
              "format": "public_key",
              "example": "pub_test_c3ViZG9tYWluLmV4YW1wbGUuY29t"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostVerifySignupAttemptBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign up succesfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostVerifySignupAttemptResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Status": { "type": "number", "example": 201 },
      "Metadata": {
        "type": "object",
        "required": ["timestamp", "request_id"],
        "properties": {
          "timestamp": { "type": "number", "example": 1707580800000 },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "example": "req_a9d35175ea94b9367aa18237ca518d99"
          },
          "page": { "type": "number", "nullable": true },
          "page_size": { "type": "number", "nullable": true },
          "total": { "type": "number", "nullable": true }
        }
      },
      "Error": {
        "type": "object",
        "nullable": true,
        "properties": {
          "url": {
            "type": "string",
            "example": "https://docs.cakeauth.com/docs/references/errors#not_found"
          },
          "code": { "type": "string", "example": "not_found" },
          "message": { "type": "string", "example": "Resources not found" }
        }
      },
      "ApiResponseWrapper": {
        "type": "object",
        "required": ["status", "metadata", "error", "data"],
        "properties": {
          "status": { "$ref": "#/components/schemas/Status" },
          "metadata": { "$ref": "#/components/schemas/Metadata" },
          "error": { "type": "null" },
          "data": { "type": "object", "nullable": true }
        }
      },
      "SessionActivityMetadata": {
        "type": "object",
        "properties": {
          "is_mobile": {
            "type": "boolean",
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "nullable": true
          },
          "browser_name": {
            "type": "string",
            "nullable": true
          },
          "browser_version": {
            "type": "string",
            "nullable": true
          },
          "device_type": {
            "type": "string",
            "nullable": true
          },
          "ip": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EmptyObject": {
        "type": "object",
        "properties": {}
      },
      "CommonTokenResponseItem": {
        "type": "object",
        "required": ["name", "value", "expires_at", "domain"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the [cookie](/docs/concepts/how-it-works/cookies#how-cakeauth-uses-cookies).",
            "example": "__Secure-session.ses_a9d35175ea94b9367aa18237ca518d99"
          },
          "value": {
            "type": "string",
            "description": "[JWT Token](/docs/concepts/how-it-works/token-refresh#token-format)",
            "example": "xxx.yyy.zzz"
          },
          "expires_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date expired",
            "format": "unixtime",
            "example": 1739201710547
          },
          "domain": {
            "type": "string",
            "description": "Target domain this tokens issued to",
            "example": "https://example.com"
          }
        }
      },
      "DirectIdentifierProviders": {
        "type": "string",
        "enum": ["email", "username", "phone"]
      },
      "DirectIdentifierMediums": {
        "type": "string",
        "enum": ["email", "sms", "whatsapp"]
      },
      "SessionActivityLogItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "type": "string",
            "nullable": true
          },
          "member_id": {
            "type": "string",
            "nullable": true
          },
          "identifier_id": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SessionActivityMetadata",
            "nullable": true
          }
        },
        "required": ["id", "session_id", "type"]
      },
      "TenantOrganizationStatus": {
        "type": "string",
        "enum": ["active", "inactive"]
      },
      "TenantMembersProvider": {
        "type": "string",
        "enum": ["github", "google", "email"]
      },
      "TenantMembersStatus": {
        "type": "string",
        "enum": ["active", "inactive", "banned", "pending"]
      },
      "AccessClientUsersAttemptsType": {
        "type": "string",
        "enum": ["signin", "signup", "password_reset", "handshake"]
      },
      "AccessClientUsersAttemptsStatus": {
        "type": "string",
        "enum": ["active", "used", "revoked"]
      },
      "AccessTenantMembersAttemptsType": {
        "type": "string",
        "enum": ["password_reset", "signup"]
      },
      "AccessTenantMembersAttemptsStatus": {
        "type": "string",
        "enum": ["active", "used", "revoked"]
      },
      "TenantProjectsStatus": {
        "type": "string",
        "enum": ["active", "inactive"]
      },
      "TenantKeysType": {
        "type": "string",
        "enum": ["public", "private"]
      },
      "AccessTenantMembersSessionsStatus": {
        "type": "string",
        "enum": ["active", "expired", "replaced", "revoked"]
      },
      "ClientUsersStatus": {
        "type": "string",
        "enum": ["active", "banned", "invited"]
      },
      "ClientUsersIdentifiersProvider": {
        "type": "string",
        "enum": [
          "email",
          "username",
          "phone",
          "google",
          "facebook",
          "apple",
          "github",
          "microsoft",
          "linkedin",
          "dropbox",
          "twitch",
          "discord",
          "tiktok",
          "gitlab",
          "slack"
        ]
      },
      "ClientUsersIdentifierContactInformationsType": {
        "type": "string",
        "enum": ["email", "phone"]
      },
      "AccessClientUsersSessionsStatus": {
        "type": "string",
        "enum": ["active", "expired", "replaced", "revoked", "timeout"]
      },
      "SettingsTenantEnvironmentsTimeUnit": {
        "type": "string",
        "enum": ["day", "hour", "minute", "second"]
      },
      "SettingsTenantEnvironmentsCaptchaType": {
        "type": "string",
        "enum": ["turnstile", "recaptcha"]
      },
      "SettingsTenantContactInformationsProvider": {
        "type": "string",
        "enum": ["email", "phone", "username", "provider_id"]
      },
      "SettingsTenantAuthenticationStrategiesProvider": {
        "type": "string",
        "enum": [
          "email",
          "phone_sms",
          "phone_call",
          "phone_whatsapp",
          "username",
          "username_email",
          "username_sms",
          "username_whatsapp"
        ]
      },
      "SettingsTenantAuthenticationStrategiesMethod": {
        "type": "string",
        "enum": ["password", "code", "magic_link"]
      },
      "SettingsTenantIdentifiersProvider": {
        "type": "string",
        "enum": [
          "email",
          "username",
          "phone",
          "google",
          "facebook",
          "apple",
          "github",
          "microsoft",
          "linkedin",
          "dropbox",
          "twitch",
          "discord",
          "tiktok",
          "gitlab",
          "slack"
        ]
      },
      "GetJWKSResponseItem": {
        "type": "array",
        "description": "Array of JWKS keys",
        "items": {
          "type": "object",
          "required": ["kid", "alg", "kty", "n", "e", "use"],
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID",
              "example": "key_qziojlr8u7rczho7xqkr2gdvygnj1lw5"
            },
            "alg": {
              "type": "string",
              "description": "Algorithm",
              "example": "RS256"
            },
            "kty": {
              "type": "string",
              "description": "Key Type",
              "example": "RSA"
            },
            "n": {
              "type": "string",
              "description": "RSA Modulus",
              "example": "<public-key-modulus>"
            },
            "e": {
              "type": "string",
              "description": "RSA Exponent",
              "example": "AQAB"
            },
            "use": {
              "type": "string",
              "description": "Key Usage",
              "example": "sig",
              "enum": ["sig", "enc"]
            },
            "ext": {
              "type": "boolean",
              "description": "Indicates whether the key is extractable",
              "example": true
            }
          }
        }
      },
      "GetMeResponseItem": {
        "type": "object",
        "required": [
          "id",
          "external_id",
          "status",
          "identifiers",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Random unique ID",
            "format": "nanoid",
            "example": "idn_a9d35175ea94b9367aa18237ca518d99"
          },
          "external_id": {
            "type": "string",
            "description": "Tenant's defined unique ID",
            "format": "string",
            "example": "0194f092-a25a-700d-a4f6-8b50e865fd00",
            "minimum": 1,
            "maximum": 64
          },
          "status": {
            "description": "User status",
            "$ref": "#/components/schemas/ClientUsersStatus"
          },
          "identifiers": {
            "type": "array",
            "description": "List of current user's identifiers",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Random unique ID",
                  "format": "nanoid",
                  "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                },
                "provider": {
                  "description": "Current identifier's provider",
                  "$ref": "#/components/schemas/ClientUsersIdentifiersProvider"
                },
                "logo": {
                  "type": "string",
                  "format": "link",
                  "description": "Link to provider logo",
                  "example": "https://cdn.cakeauth.com/socials/apple.svg"
                },
                "value": {
                  "type": "string",
                  "description": "Identifier value (e.g., email or phone number)",
                  "example": "test@example.com"
                },
                "is_current": {
                  "type": "boolean",
                  "description": "Whether this identifier is the currently active one (used in the current session data)"
                },
                "is_password_enabled": {
                  "type": "boolean",
                  "description": "Whether a password is enabled for this identifier"
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Whether this identifier has been verified"
                },
                "contact_informations": {
                  "type": "array",
                  "description": "List of associated contact information",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Random unique ID for contact information",
                        "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                      },
                      "type": {
                        "description": "Type of contact information",
                        "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                      },
                      "value": {
                        "type": "string",
                        "description": "Contact information value (e.g., email address, phone number)",
                        "example": "test@example.com"
                      },
                      "is_verified": {
                        "type": "boolean",
                        "description": "Whether the contact information has been verified"
                      }
                    },
                    "required": ["id", "type", "value", "is_verified"]
                  }
                },
                "updated_at": {
                  "type": "integer",
                  "description": "UNIX Timestamp of date last updated",
                  "format": "int64",
                  "example": 1739201710547
                },
                "created_at": {
                  "type": "integer",
                  "description": "UNIX Timestamp of date created",
                  "format": "int64",
                  "example": 1739201710547
                }
              },
              "required": [
                "id",
                "provider",
                "logo",
                "value",
                "is_current",
                "is_password_enabled",
                "is_verified",
                "contact_informations",
                "updated_at",
                "created_at"
              ]
            }
          },
          "updated_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date last updated",
            "format": "unixtime",
            "example": 1739201710547
          },
          "created_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date created",
            "format": "unixtime",
            "example": 1739201710547
          }
        }
      },
      "PostMeResetPasswordBody": {
        "type": "object",
        "required": [
          "new_password",
          "current_password",
          "revoke_other_sessions"
        ],
        "properties": {
          "current_password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "Currently existing password.",
            "example": "my-secure-password"
          },
          "new_password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "New password that wants to be set",
            "example": "my-secure-password"
          },
          "revoke_other_sessions": {
            "type": "boolean",
            "description": "This flags control whether to **revoke all other active sessions** for this user or not."
          }
        }
      },
      "PostMeResetPasswordResponseItem": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success response message",
            "example": "Password successfully updated"
          }
        }
      },
      "PostAttemptResetPasswordBody": {
        "type": "object",
        "required": ["target_url", "provider", "value"],
        "properties": {
          "captcha_token": {
            "type": "string",
            "format": "captcha_token",
            "description": "Captcha token. Read more about bot protections, [here](/docs/guides/securing-app/bot-protection).",
            "example": "<captcha-token>"
          },
          "target_url": {
            "type": "string",
            "format": "url",
            "description": "A full path to password reset page. Read more about password reset link, [here](/docs/guides/reset-password#password-reset-link).",
            "example": "https://example.com/pages/reset-password"
          },
          "provider": {
            "description": "Target identifier's provider",
            "$ref": "#/components/schemas/DirectIdentifierProviders"
          },
          "value": {
            "type": "string",
            "description": "Identifier value (e.g., value of email or phone number)",
            "example": "test@example.com"
          }
        }
      },
      "PostAttemptResetPasswordResponseItem": {
        "type": "object",
        "required": ["attempt_id", "provider", "expires_at", "medium"],
        "properties": {
          "attempt_id": {
            "description": "Random unique ID identifies the current attempt",
            "format": "nanoid",
            "example": "atm_a9d35175ea94b9367aa18237ca518d99"
          },
          "provider": {
            "description": "Target identifier's provider",
            "$ref": "#/components/schemas/DirectIdentifierProviders"
          },
          "expires_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date the attempt expires",
            "format": "int64",
            "example": 1739201710547
          },
          "medium": {
            "description": "Target identifier's provider",
            "$ref": "#/components/schemas/DirectIdentifierMediums"
          },
          "masked_target": {
            "type": "string",
            "format": "string",
            "description": "A masked address for the email/phone number values.",
            "example": "t**@**e.com"
          }
        }
      },
      "PostVerifyResetPasswordAttemptBody": {
        "type": "object",
        "required": ["new_password", "token"],
        "properties": {
          "new_password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "New password that wants to be set",
            "example": "my-secure-password"
          },
          "token": {
            "type": "string",
            "description": "Attempt token sent to the users. Signifies via the `__cakeauth_token` params. Read more about the structure of password reset link, [here](/docs/guides/reset-password#password-reset-link).",
            "example": "tok_a9d35175ea94b9367aa18237ca518d99"
          }
        }
      },
      "PostVerifyResetPasswordAttemptResponseItem": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success response message",
            "example": "Password successfully resetted"
          }
        }
      },
      "GetSessionsResponseItem": {
        "type": "object",
        "required": [
          "id",
          "user",
          "status",
          "identifiers",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Random unique ID",
            "format": "nanoid",
            "example": "ses_a9d35175ea94b9367aa18237ca518d99"
          },
          "user": {
            "type": "object",
            "description": "User data of the current session",
            "properties": {
              "id": {
                "type": "string",
                "description": "Random unique ID",
                "format": "nanoid",
                "example": "idn_a9d35175ea94b9367aa18237ca518d99"
              },
              "external_id": {
                "type": "string",
                "description": "Tenant's defined unique ID",
                "format": "string",
                "example": "0194f092-a25a-700d-a4f6-8b50e865fd00",
                "minimum": 1,
                "maximum": 64
              }
            }
          },
          "status": {
            "description": "Sesison status",
            "$ref": "#/components/schemas/AccessClientUsersSessionsStatus"
          },
          "metadata": {
            "description": "Session's metadata",
            "$ref": "#/components/schemas/SessionActivityMetadata"
          },
          "identifiers": {
            "type": "array",
            "description": "List of identifiers of current user's identifiers",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Random unique ID",
                  "format": "nanoid",
                  "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                },
                "provider": {
                  "description": "Current identifier's provider",
                  "$ref": "#/components/schemas/ClientUsersIdentifiersProvider"
                },
                "logo": {
                  "type": "string",
                  "format": "link",
                  "description": "Link to provider logo",
                  "example": "https://cdn.cakeauth.com/socials/apple.svg"
                },
                "value": {
                  "type": "string",
                  "description": "Identifier value (e.g., email or phone number)",
                  "example": "test@example.com"
                },
                "is_current": {
                  "type": "boolean",
                  "description": "Whether this identifier is the currently active one (used in the current session data)"
                },
                "is_password_enabled": {
                  "type": "boolean",
                  "description": "Whether a password is enabled for this identifier"
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Whether this identifier has been verified"
                },
                "contact_informations": {
                  "type": "array",
                  "description": "List of associated contact information",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Random unique ID for contact information",
                        "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                      },
                      "type": {
                        "description": "Type of contact information",
                        "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                      },
                      "value": {
                        "type": "string",
                        "description": "Contact information value (e.g., email address, phone number)",
                        "example": "test@example.com"
                      },
                      "is_verified": {
                        "type": "boolean",
                        "description": "Whether the contact information has been verified"
                      }
                    },
                    "required": ["id", "type", "value", "is_verified"]
                  }
                },
                "updated_at": {
                  "type": "integer",
                  "description": "UNIX Timestamp of date last updated",
                  "format": "int64",
                  "example": 1739201710547
                },
                "created_at": {
                  "type": "integer",
                  "description": "UNIX Timestamp of date created",
                  "format": "int64",
                  "example": 1739201710547
                }
              },
              "required": [
                "id",
                "provider",
                "logo",
                "value",
                "is_current",
                "is_password_enabled",
                "is_verified",
                "contact_informations",
                "updated_at",
                "created_at"
              ]
            }
          },

          "expires_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date expired",
            "format": "unixtime",
            "example": 1739201710547
          },
          "revoked_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date revoked",
            "format": "unixtime",
            "example": 1739201710547
          },
          "updated_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date last updated",
            "format": "unixtime",
            "example": 1739201710547
          },
          "created_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date created",
            "format": "unixtime",
            "example": 1739201710547
          }
        }
      },
      "GetSessionDetailsResponseItem": {
        "$ref": "#/components/schemas/GetSessionsResponseItem"
      },
      "GetHandshakeSessionResponseItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetSessionsResponseItem"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "$ref": "#/components/schemas/CommonTokenResponseItem"
              }
            }
          }
        ]
      },
      "PostRefreshAccessTokenResponseItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetSessionsResponseItem"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "$ref": "#/components/schemas/CommonTokenResponseItem"
              }
            }
          }
        ]
      },
      "PostRevokeSessionResponseItem": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success response message",
            "example": "Session successfully revoked"
          }
        }
      },
      "PostGetAvailableSigninStrategiesBody": {
        "type": "object",
        "required": ["provider", "value"],
        "properties": {
          "provider": {
            "description": "Target identifier's provider to check",
            "$ref": "#/components/schemas/DirectIdentifierProviders"
          },
          "value": {
            "type": "string",
            "description": "Identifier value to check (e.g., value of email or phone number)",
            "example": "test@example.com"
          }
        }
      },
      "PostGetAvailableSigninStrategiesResponseItem": {
        "type": "object",
        "required": [
          "id",
          "provider",
          "method",
          "strategy",
          "title",
          "subtitle"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier ID. Supporting the `user_id` property.",
            "example": "idn_a9d35175ea94b9367aa18237ca518d99"
          },
          "provider": {
            "description": "Target identifier's provider",
            "$ref": "#/components/schemas/SettingsTenantAuthenticationStrategiesProvider"
          },
          "method": {
            "description": "Authentication strategies method",
            "$ref": "#/components/schemas/SettingsTenantAuthenticationStrategiesMethod"
          },
          "strategy": {
            "type": "string",
            "description": "Strategy code. It's a combination of {provider}_{method}.",
            "example": "phone_whatsapp_code"
          },
          "title": {
            "type": "string",
            "description": "Title of the authentication strategy. Useful to display in a client component.",
            "example": "WhatsApp OTP"
          },
          "subtitle": {
            "type": "string",
            "description": "Subtitle/description of the authentication strategy. Useful to display in a client component.",
            "example": "Get a one-time password sent to your phone via WhatsApp"
          }
        }
      },
      "PostAttemptSigninBody": {
        "type": "object",
        "required": ["authentication_strategy", "provider", "value"],
        "properties": {
          "captcha_token": {
            "type": "string",
            "format": "captcha_token",
            "description": "Captcha token. Read more about bot protections, [here](/docs/guides/securing-app/bot-protection).",
            "example": "<captcha-token>"
          },
          "authentication_strategy": {
            "type": "string",
            "format": "{provider}_{method}",
            "description": "Desired authentication strategy provider & method.",
            "example": "phone_whatsapp_code"
          },
          "provider": {
            "description": "Target identifier's provider",
            "$ref": "#/components/schemas/DirectIdentifierProviders"
          },
          "value": {
            "type": "string",
            "description": "Identifier value (e.g., value of email or phone number)",
            "example": "test@example.com"
          }
        }
      },
      "PostAttemptSigninResponseItem": {
        "type": "object",
        "required": [
          "attempt_id",
          "authentication_strategy",
          "expires_at",
          "components"
        ],
        "properties": {
          "attempt_id": {
            "description": "Random unique ID identifies the current attempt",
            "format": "nanoid",
            "example": "atm_a9d35175ea94b9367aa18237ca518d99"
          },
          "masked_target": {
            "type": "string",
            "format": "string",
            "description": "A masked address for the email/phone number values.",
            "example": "t**@**e.com"
          },
          "authentication_strategy": {
            "type": "string",
            "format": "{provider}_{method}",
            "description": "Desired authentication strategy provider & method.",
            "example": "phone_whatsapp_code"
          },
          "expires_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date the attempt expires",
            "format": "int64",
            "example": 1739201710547
          },
          "components": {
            "type": "array",
            "description": "A list of helpful arrays for you to decide what kind of components to render for current attempt.",
            "items": {
              "type": "object",
              "required": ["type", "label", "component_kind", "required"],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Component type",
                  "example": "code"
                },
                "label": {
                  "type": "string",
                  "description": "Label of the strategy. Useful to display in a client component.",
                  "example": "Code"
                },
                "component_kind": {
                  "type": "string",
                  "enum": ["button", "input"]
                },
                "logo": {
                  "type": "string",
                  "format": "link",
                  "description": "Link to authentication strategy logo",
                  "example": "https://cdn.cakeauth.com/socials/whtasapp.svg"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether the component is required to be fulfilled"
                }
              }
            }
          }
        }
      },
      "PostVerifySigninAttemptBody": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "format": "code",
            "description": "If authentciation method is `code`, pass the code value to check here. If not, ignore this params.",
            "example": "123456"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "If authentciation method is `password`, pass the password value to check here. If not, ignore this params.",
            "example": "my-secure-password"
          }
        }
      },
      "PostVerifySigninAttemptResponseItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetSessionsResponseItem"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "$ref": "#/components/schemas/CommonTokenResponseItem"
              }
            }
          }
        ]
      },
      "PostAttemptSignupBody": {
        "type": "object",
        "required": ["veriication_strategy", "provider", "value"],
        "properties": {
          "captcha_token": {
            "type": "string",
            "format": "captcha_token",
            "description": "Captcha token. Read more about bot protections, [here](/docs/guides/securing-app/bot-protection).",
            "example": "<captcha-token>"
          },
          "veriication_strategy": {
            "type": "string",
            "format": "{provider}_{method}",
            "description": "Desired verification strategy provider & method.",
            "example": "phone_whatsapp_code"
          },
          "provider": {
            "description": "Target identifier's provider",
            "$ref": "#/components/schemas/DirectIdentifierProviders"
          },
          "value": {
            "type": "string",
            "description": "Identifier value (e.g., value of email or phone number)",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "Assign password for this user. If this value is not empty, the `is_password_enabled` will result to `true`. And vice versa.",
            "example": "my-secure-password"
          },
          "external_id": {
            "type": "string",
            "description": "Random ID that uniqely identified a user in an environment. Use this to identify a user ID to match with your systems ID. If empty, CakeAuth will use the `id` value.",
            "example": "0194f092-a25a-700d-a4f6-8b50e865fd00",
            "maxLength": 64
          },
          "contact_informations": {
            "type": "array",
            "description": "List of contact informations related to this user",
            "items": {
              "type": "object",
              "required": ["type", "value"],
              "properties": {
                "type": {
                  "description": "Contact information type",
                  "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                },
                "value": {
                  "type": "string",
                  "description": "Value of given contact information",
                  "example": "test@example.com"
                }
              }
            }
          }
        }
      },
      "PostAttemptSignupResponseItem": {
        "type": "object",
        "required": ["is_user_created"],
        "properties": {
          "is_user_created": {
            "type": "boolean",
            "description": "Signifies whether the signup processs is already done or user needs to do some attempt verification. If an attempt requires to be verifier, the value `attempt` will provides the attempt details, and the value `session` will be `null`. And vice-versa."
          },
          "attempt": {
            "$ref": "#/components/schemas/PostAttemptSigninResponseItem"
          },
          "session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetSessionsResponseItem"
              },
              {
                "type": "object",
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/CommonTokenResponseItem"
                  }
                }
              }
            ]
          }
        }
      },
      "PostVerifySignupAttemptBody": {
        "type": "object",
        "required": ["code"],
        "properties": {
          "code": {
            "type": "string",
            "format": "code",
            "description": "Pass the code value to check here",
            "example": "123456"
          }
        }
      },
      "PostVerifySignupAttemptResponseItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetSessionsResponseItem"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "$ref": "#/components/schemas/CommonTokenResponseItem"
              }
            }
          }
        ]
      },
      "GetSettingsResponseItem": {
        "type": "object",
        "properties": {
          "project": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "description": "Random unique ID for current project",
                "format": "nanoid",
                "example": "prj_a9d35175ea94b9367aa18237ca518d99"
              },
              "name": {
                "type": "string",
                "description": "Current project name",
                "example": "My Cool Project"
              }
            }
          },
          "environment": {
            "type": "object",
            "required": ["id", "host", "name", "is_production"],
            "properties": {
              "id": {
                "type": "string",
                "description": "Random unique ID for current environment",
                "format": "nanoid",
                "example": "env_a9d35175ea94b9367aa18237ca518d99"
              },
              "host": {
                "type": "string",
                "description": "Dedicated host for current environment",
                "format": "url",
                "example": "my-cool-app.test.cakeauth.cpp"
              },
              "name": {
                "type": "string",
                "description": "Current project name",
                "example": "Development"
              },
              "is_production": {
                "type": "boolean",
                "description": "Signifies whether current environment is a [Development or Production environment](/docs/concepts/structure#3-environments)."
              },
              "configuration": {
                "description": "Environment general configuration",
                "required": [
                  "support_link",
                  "allow_signup",
                  "session_lifetime",
                  "disable_email_sub_address",
                  "email_deny_list",
                  "email_allow_list",
                  "phone_deny_list",
                  "phone_allow_list"
                ],
                "properties": {
                  "support_link": {
                    "type": "string",
                    "description": "Where your users can reach out to you in case of problem",
                    "default": "mailto:<your_email>",
                    "example": "https://example.com/support"
                  },
                  "allow_signup": {
                    "type": "boolean",
                    "description": "[Signup restrictions](/docs/guides/securing-app/access-control#signup-restrictions)."
                  },
                  "session_lifetime": {
                    "type": "object",
                    "required": ["value", "unit"],
                    "properties": {
                      "value": {
                        "type": "integer",
                        "description": "[Max age](/docs/guides/customize/session#session-maximum-age).",
                        "example": 1
                      },
                      "unit": {
                        "$ref": "#/components/schemas/SettingsTenantEnvironmentsTimeUnit"
                      }
                    }
                  },
                  "inactivity_timeout": {
                    "type": "object",
                    "required": ["value", "unit"],
                    "properties": {
                      "value": {
                        "type": "integer",
                        "description": "[Inactivity timeout](/docs/guides/customize/session#inactivity-timeout-optional).",
                        "example": 1
                      },
                      "unit": {
                        "$ref": "#/components/schemas/SettingsTenantEnvironmentsTimeUnit"
                      }
                    }
                  },
                  "attempt_limit": {
                    "type": "integer",
                    "description": "Limit for [Auto-blocking](docs/guides/securing-app/auto-block).",
                    "example": 99
                  },
                  "lockout": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "integer",
                        "description": "Lockout/block duration for [Auto-blocking](docs/guides/securing-app/auto-block).",
                        "example": 99
                      },
                      "unit": {
                        "$ref": "#/components/schemas/SettingsTenantEnvironmentsTimeUnit"
                      }
                    },
                    "required": ["value", "unit"]
                  },
                  "captcha": {
                    "type": "object",
                    "description": "Configurations for [Bot protection](/docs/guides/securing-app/bot-protection).",
                    "required": ["site_key", "type"],
                    "properties": {
                      "site_key": {
                        "type": "string",
                        "description": "Publishable key from the captcha providers."
                      },
                      "type": {
                        "$ref": "#/components/schemas/SettingsTenantEnvironmentsCaptchaType"
                      }
                    }
                  },
                  "disable_email_sub_address": {
                    "type": "boolean",
                    "description": "Disable email sub-address. Learn more, [here](/docs/guides/securing-app/access-control#email-restrictions)."
                  },
                  "email_deny_list": {
                    "type": "array",
                    "description": "Email deny list. **Important**: this feature is unavailable!",
                    "items": {
                      "type": "string"
                    }
                  },
                  "email_allow_list": {
                    "type": "array",
                    "description": "Email allow list. **Important**: this feature is unavailable!",
                    "items": {
                      "type": "string"
                    }
                  },
                  "phone_deny_list": {
                    "type": "array",
                    "description": "Phone deny list. **Important**: this feature is unavailable!",
                    "items": {
                      "type": "string"
                    }
                  },
                  "phone_allow_list": {
                    "type": "array",
                    "description": "Phone allow list. **Important**: this feature is unavailable!",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Random unique ID",
                  "format": "nanoid",
                  "example": "dom_a9d35175ea94b9367aa18237ca518d99"
                },
                "domain": {
                  "description": "Authorized domain name. In `origin` format (eg. `https://example.com`.",
                  "format": "url",
                  "example": "https://example.com"
                }
              }
            }
          },
          "signup_forms": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "provider": {
                  "$ref": "#/components/schemas/SettingsTenantIdentifiersProvider"
                },
                "group": {
                  "type": "string",
                  "description": "Group of authentciation strategy.",
                  "enum": ["social", "direct"]
                },
                "verification_strategies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Random unique ID",
                        "format": "nanoid",
                        "example": "dom_a9d35175ea94b9367aa18237ca518d99"
                      },
                      "provider": {
                        "$ref": "#/components/schemas/SettingsTenantAuthenticationStrategiesProvider"
                      },
                      "method": {
                        "$ref": "#/components/schemas/SettingsTenantAuthenticationStrategiesMethod"
                      },
                      "strategy": {
                        "type": "string",
                        "format": "{provider}_{method}",
                        "description": "Desired authentication strategy provider & method.",
                        "example": "phone_whatsapp_code"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the authentication strategy. Useful to display in a client component.",
                        "example": "WhatsApp OTP"
                      },
                      "subtitle": {
                        "type": "string",
                        "description": "Subtitle/description of the authentication strategy. Useful to display in a client component.",
                        "example": "Get a one-time password sent to your phone via WhatsApp"
                      }
                    },
                    "required": [
                      "id",
                      "provider",
                      "method",
                      "strategy",
                      "title",
                      "subtitle"
                    ]
                  }
                },
                "components": {
                  "type": "array",
                  "description": "A list of helpful arrays for you to decide what kind of components to render for current attempt.",
                  "required": [
                    "provider",
                    "group",
                    "verification_strategies",
                    "components"
                  ],
                  "items": {
                    "type": "object",
                    "required": ["type", "label", "component_kind", "required"],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Component type",
                        "example": "code"
                      },
                      "label": {
                        "type": "string",
                        "description": "Label of the strategy. Useful to display in a client component.",
                        "example": "Code"
                      },
                      "component_kind": {
                        "type": "string",
                        "enum": ["button", "input"]
                      },
                      "logo": {
                        "type": "string",
                        "format": "link",
                        "description": "Link to authentication strategy logo",
                        "example": "https://cdn.cakeauth.com/socials/whtasapp.svg"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "Whether the component is required to be fulfilled"
                      },
                      "configuration": {
                        "type": "object",
                        "description": "Configuratino for the authentication strategies. Only available for [Socials Identifier](/docs/guides/oauth/overview).",
                        "properties": {
                          "client_id": {
                            "type": "string",
                            "description": "OAuth client ID",
                            "example": "xxx.googleusersapp.com"
                          },
                          "redirect_uri": {
                            "type": "string",
                            "description": "OAuth redirect uri",
                            "example": "https://my-cool-app.live.cakeauth.app/v1/oauth/callback"
                          },
                          "scopes": {
                            "type": "array",
                            "description": "Array of scopes",
                            "items": {
                              "type": "string"
                            },
                            "example": ["read", "write"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "signin_forms": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "provider": {
                  "$ref": "#/components/schemas/SettingsTenantIdentifiersProvider"
                },
                "group": {
                  "type": "string",
                  "description": "Group of authentciation strategy.",
                  "enum": ["social", "direct"]
                },
                "components": {
                  "type": "array",
                  "description": "A list of helpful arrays for you to decide what kind of components to render for current attempt.",
                  "required": [
                    "provider",
                    "group",
                    "verification_strategies",
                    "components"
                  ],
                  "items": {
                    "type": "object",
                    "required": ["type", "label", "component_kind", "required"],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Component type",
                        "example": "code"
                      },
                      "label": {
                        "type": "string",
                        "description": "Label of the strategy. Useful to display in a client component.",
                        "example": "Code"
                      },
                      "component_kind": {
                        "type": "string",
                        "enum": ["button", "input"]
                      },
                      "logo": {
                        "type": "string",
                        "format": "link",
                        "description": "Link to authentication strategy logo",
                        "example": "https://cdn.cakeauth.com/socials/whtasapp.svg"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "Whether the component is required to be fulfilled"
                      },
                      "configuration": {
                        "type": "object",
                        "description": "Configuratino for the authentication strategies. Only available for [Socials Identifier](/docs/guides/oauth/overview).",
                        "properties": {
                          "client_id": {
                            "type": "string",
                            "description": "OAuth client ID",
                            "example": "xxx.googleusersapp.com"
                          },
                          "redirect_uri": {
                            "type": "string",
                            "description": "OAuth redirect uri",
                            "example": "https://my-cool-app.live.cakeauth.app/v1/oauth/callback"
                          },
                          "scopes": {
                            "type": "array",
                            "description": "Array of scopes",
                            "items": {
                              "type": "string"
                            },
                            "example": ["read", "write"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "project",
          "environment",
          "domains",
          "signup_forms",
          "signin_forms"
        ]
      }
    },
    "responses": {
      "BadRequestErrorResponse": {
        "description": "Bad request error response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApiResponseWrapper" },
                {
                  "type": "object",
                  "properties": {
                    "data": { "type": "null" },
                    "status": { "example": 400 },
                    "error": {
                      "example": {
                        "url": "https://docs.cakeauth.com/docs/references/errors#bad_request",
                        "code": "bad_request",
                        "message": "Invalid payload"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "description": "Unauthorized response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApiResponseWrapper" },
                {
                  "type": "object",
                  "properties": {
                    "data": { "type": "null" },
                    "status": { "example": 401 },
                    "error": {
                      "example": {
                        "url": "https://docs.cakeauth.com/docs/references/errors#unauthorized",
                        "code": "unauthorized",
                        "message": "Unauthorized"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApiResponseWrapper" },
                {
                  "type": "object",
                  "properties": {
                    "data": { "type": "null" },
                    "status": { "example": 500 },
                    "error": {
                      "example": {
                        "url": "https://docs.cakeauth.com/docs/references/errors#internal_server_error",
                        "code": "internal_server_error",
                        "message": "Internal server error"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "AccessTokenAuth": {
        "type": "http",
        "description": "Access token",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
