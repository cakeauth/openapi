{
  "openapi": "3.0.3",
  "info": {
    "title": "CakeAuth Backend API",
    "description": "APIs for interacting with CakeAuth for Backend",
    "version": "0.1.0",
    "contact": {
      "name": "CakeAuth team",
      "email": "team@cakeauth.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://github.com/cakeauth/openapi/LICENSE"
    }
  },
  "servers": [
    {
      "url": "https://api.cakeauth.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Identifiers",
      "description": "An identifier is set of informations that being attached to a user that can be used as an authentication identity. Use these sets of endpoints to manage user's identifers. Read more about [direct identifier](/docs/guides/direct/overview) and [social identifiers](/docs/guides/oauth/overview)."
    },
    {
      "name": "Sessions",
      "description": "A session is is a temporary state that keeps a user authenticated after they authenticate. Use these sets of endpoints to manage sessions for users and its identifiers."
    },
    {
      "name": "Users",
      "description": "Use these sets of endpoints to manage your user base. Learn more how you can manage users, [here](/docs/guides/manage-users)."
    }
  ],
  "paths": {
    "/v1/identifiers": {
      "get": {
        "tags": ["Identifiers"],
        "summary": "List identifiers",
        "description": "Retrieve a paginated list of identifiers filtered by user ID",
        "operationId": "getIdentifiers",
        "security": [{ "PrivateKeyAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "example": 1,
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Pagination data size",
            "example": 10,
            "required": false,
            "schema": {
              "type": "number",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "CakeAuth ID or user's defined external_id",
            "example": "0194f092-a25a-700d-a4f6-8b50e865fd00",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identifiers",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetIdentifiersResponseItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      },
      "post": {
        "tags": ["Identifiers"],
        "description": "Use this endpoint to create a new user identifer",
        "summary": "Create a new user identifier",
        "operationId": "createIdentifier",
        "security": [{ "PrivateKeyAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateIdentifierBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Identifier created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostCreateIdentifierResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/identifiers/{identifier_id}": {
      "delete": {
        "tags": ["Identifiers"],
        "description": "Delete an identifier from a user.",
        "summary": "Delete an identifier",
        "operationId": "deleteIdentifier",
        "security": [{ "PrivateKeyAuth": [] }],
        "parameters": [
          {
            "name": "identifier_id",
            "in": "path",
            "description": "ID of the target identifier",
            "example": "idn_a9d35175ea94b9367aa18237ca518d99",
            "required": true,
            "schema": {
              "type": "string",
              "format": "id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete identifier success response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeleteIdentifierResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/identifiers/{identifier_id}/set_password": {
      "post": {
        "tags": ["Identifiers"],
        "description": "Set a password to a specific identifier data. Only works with [direct identifier](/docs/guides/direct/overview).",
        "summary": "Set password to identifier",
        "operationId": "setIdentifierPassword",
        "security": [{ "PrivateKeyAuth": [] }],
        "parameters": [
          {
            "name": "identifier_id",
            "in": "path",
            "description": "ID of the target identifier",
            "example": "idn_a9d35175ea94b9367aa18237ca518d99",
            "required": true,
            "schema": {
              "type": "string",
              "format": "id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSetIdentifierPasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password set to an identifier",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostSetIdentifierPasswordResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    },
    "/v1/sessions": {
      "get": {
        "tags": ["Sessions"],
        "summary": "List sessions",
        "description": "Retrieve a paginated list of sessions filtered by user ID",
        "operationId": "getSessions",
        "security": [{ "PrivateKeyAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "example": 1,
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Pagination data size",
            "example": 10,
            "required": false,
            "schema": {
              "type": "number",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "CakeAuth ID or user's defined external_id",
            "example": "0194f092-a25a-700d-a4f6-8b50e865fd00",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetSessionsResponseItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      },
      "post": {
        "tags": ["Sessions"],
        "description": "Use this endpoint to create a new session for a user/identifiers",
        "summary": "Create new session",
        "operationId": "postCreateSession",
        "security": [{ "PrivateKeyAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateSessionBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponseWrapper" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PostCreateSessionResponseItem"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestErrorResponse" },
          "401": { "$ref": "#/components/responses/UnauthorizedErrorResponse" },
          "500": { "$ref": "#/components/responses/ErrorResponse" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Status": { "type": "number", "example": 200 },
      "Metadata": {
        "type": "object",
        "required": ["timestamp", "request_id"],
        "properties": {
          "timestamp": { "type": "number", "example": 1707580800000 },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "example": "req_a9d35175ea94b9367aa18237ca518d99"
          },
          "page": { "type": "number", "nullable": true },
          "page_size": { "type": "number", "nullable": true },
          "total": { "type": "number", "nullable": true }
        }
      },
      "Error": {
        "type": "object",
        "nullable": true,
        "properties": {
          "url": {
            "type": "string",
            "example": "https://docs.cakeauth.com/docs/references/errors#not_found"
          },
          "code": { "type": "string", "example": "not_found" },
          "message": { "type": "string", "example": "Resources not found" }
        }
      },
      "ApiResponseWrapper": {
        "type": "object",
        "required": ["status", "metadata", "error", "data"],
        "properties": {
          "status": { "$ref": "#/components/schemas/Status" },
          "metadata": { "$ref": "#/components/schemas/Metadata" },
          "error": { "type": "null" },
          "data": { "type": "object", "nullable": true }
        }
      },
      "SessionActivityMetadata": {
        "type": "object",
        "properties": {
          "is_mobile": {
            "type": "boolean",
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "nullable": true
          },
          "browser_name": {
            "type": "string",
            "nullable": true
          },
          "browser_version": {
            "type": "string",
            "nullable": true
          },
          "device_type": {
            "type": "string",
            "nullable": true
          },
          "ip": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SessionActivityLogItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "type": "string",
            "nullable": true
          },
          "member_id": {
            "type": "string",
            "nullable": true
          },
          "identifier_id": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SessionActivityMetadata",
            "nullable": true
          }
        },
        "required": ["id", "session_id", "type"]
      },
      "TenantOrganizationStatus": {
        "type": "string",
        "enum": ["active", "inactive"]
      },
      "TenantMembersProvider": {
        "type": "string",
        "enum": ["github", "google", "email"]
      },
      "TenantMembersStatus": {
        "type": "string",
        "enum": ["active", "inactive", "banned", "pending"]
      },
      "AccessClientUsersAttemptsType": {
        "type": "string",
        "enum": ["signin", "signup", "password_reset", "handshake"]
      },
      "AccessClientUsersAttemptsStatus": {
        "type": "string",
        "enum": ["active", "used", "revoked"]
      },
      "AccessTenantMembersAttemptsType": {
        "type": "string",
        "enum": ["password_reset", "signup"]
      },
      "AccessTenantMembersAttemptsStatus": {
        "type": "string",
        "enum": ["active", "used", "revoked"]
      },
      "TenantProjectsStatus": {
        "type": "string",
        "enum": ["active", "inactive"]
      },
      "TenantKeysType": {
        "type": "string",
        "enum": ["public", "private"]
      },
      "AccessTenantMembersSessionsStatus": {
        "type": "string",
        "enum": ["active", "expired", "replaced", "revoked"]
      },
      "ClientUsersStatus": {
        "type": "string",
        "enum": ["active", "banned", "invited"]
      },
      "ClientUsersIdentifiersProvider": {
        "type": "string",
        "enum": [
          "email",
          "username",
          "phone",
          "google",
          "facebook",
          "apple",
          "github",
          "microsoft",
          "linkedin",
          "dropbox",
          "twitch",
          "discord",
          "tiktok",
          "gitlab",
          "slack"
        ]
      },
      "ClientUsersIdentifierContactInformationsType": {
        "type": "string",
        "enum": ["email", "phone"]
      },
      "AccessClientUsersSessionsStatus": {
        "type": "string",
        "enum": ["active", "expired", "replaced", "revoked", "timeout"]
      },
      "SettingsTenantEnvironmentsTimeUnit": {
        "type": "string",
        "enum": ["day", "hour", "minute", "second"]
      },
      "SettingsTenantEnvironmentsCaptchaType": {
        "type": "string",
        "enum": ["turnstile", "recaptcha"]
      },
      "SettingsTenantContactInformationsProvider": {
        "type": "string",
        "enum": ["email", "phone", "username", "provider_id"]
      },
      "SettingsTenantAuthenticationStrategiesProvider": {
        "type": "string",
        "enum": [
          "email",
          "phone_sms",
          "phone_call",
          "phone_whatsapp",
          "username",
          "username_email",
          "username_sms",
          "username_whatsapp"
        ]
      },
      "SettingsTenantAuthenticationStrategiesMethod": {
        "type": "string",
        "enum": ["password", "code", "magic_link"]
      },
      "SettingsTenantIdentifiersProvider": {
        "type": "string",
        "enum": [
          "email",
          "username",
          "phone",
          "google",
          "facebook",
          "apple",
          "github",
          "microsoft",
          "linkedin",
          "dropbox",
          "twitch",
          "discord",
          "tiktok",
          "gitlab",
          "slack"
        ]
      },
      "GetIdentifiersResponseItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Random unique ID",
            "format": "nanoid",
            "example": "idn_a9d35175ea94b9367aa18237ca518d99"
          },
          "provider": {
            "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
          },
          "logo": {
            "type": "string",
            "format": "link",
            "description": "Link to provider logo",
            "example": "https://cdn.cakeauth.com/socials/apple.svg"
          },
          "value": {
            "type": "string",
            "description": "Value of given provider",
            "example": "test@example.com"
          },
          "is_password_enabled": {
            "type": "boolean",
            "description": "Indicate whether this provider has a password value or not"
          },
          "is_verified": {
            "type": "boolean",
            "description": "Indicate whether this provider is verified or not"
          },
          "contact_informations": {
            "type": "array",
            "description": "List of contact informations related to this provider",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Random unique ID",
                  "format": "nanoid",
                  "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                },
                "type": {
                  "description": "Contact information type",
                  "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                },
                "value": {
                  "type": "string",
                  "description": "Value of given contact information",
                  "example": "test@example.com"
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Indicate whether this contact information is verified or not"
                }
              }
            }
          },
          "updated_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date last updated",
            "format": "unixtime",
            "example": 1739201710547
          },
          "created_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date created",
            "format": "unixtime",
            "example": 1739201710547
          }
        },
        "required": [
          "id",
          "provider",
          "logo",
          "value",
          "is_password_enabled",
          "is_verified",
          "contact_informations",
          "updated_at",
          "created_at"
        ]
      },
      "PostCreateIdentifierBody": {
        "type": "object",
        "required": ["user_id", "provider", "value"],
        "properties": {
          "user_id": {
            "type": "string",
            "description": "CakeAuth ID or user's defined external_id",
            "example": "0194f092-a25a-700d-a4f6-8b50e865fd00"
          },
          "provider": {
            "description": "Type of provider",
            "$ref": "#/components/schemas/ClientUsersIdentifiersProvider"
          },
          "value": {
            "type": "string",
            "description": "Value of given provider",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "Assign password for this provider. If this value is not empty, the `is_password_enabled` will result to `true`. And vice versa.",
            "example": "my-secure-password"
          },
          "is_verified": {
            "type": "boolean",
            "description": "Control whether this provider is verified or not"
          },
          "contact_informations": {
            "type": "array",
            "description": "List of contact informations related to this provider",
            "items": {
              "type": "object",
              "required": ["type", "value"],
              "properties": {
                "type": {
                  "description": "Contact information type",
                  "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Control whether this contact information is verified or not"
                },
                "value": {
                  "type": "string",
                  "description": "Value of given contact information",
                  "example": "test@example.com"
                }
              }
            }
          }
        }
      },
      "PostCreateIdentifierResponseItem": {
        "type": "object",
        "required": [
          "id",
          "provider",
          "value",
          "is_password_enabled",
          "is_verified",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Random unique ID",
            "format": "nanoid",
            "example": "idn_a9d35175ea94b9367aa18237ca518d99"
          },
          "provider": {
            "description": "Type of provider",
            "$ref": "#/components/schemas/ClientUsersIdentifiersProvider"
          },
          "logo": {
            "type": "string",
            "description": "Link to provider logo",
            "example": "https://cdn.cakeauth.com/socials/apple.svg"
          },
          "value": {
            "type": "string",
            "description": "Value of given provider",
            "example": "test@example.com"
          },
          "is_password_enabled": {
            "type": "boolean",
            "description": "Indicate whether this provider has a password value or not"
          },
          "is_verified": {
            "type": "boolean",
            "description": "Indicate whether this provider is verified or not"
          },
          "contact_informations": {
            "type": "array",
            "description": "List of contact informations related to this provider",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Random unique ID",
                  "format": "nanoid",
                  "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                },
                "type": {
                  "description": "Contact information type",
                  "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                },
                "value": {
                  "type": "string",
                  "description": "Value of given contact information",
                  "example": "test@example.com"
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Indicate whether this contact information is verified or not"
                }
              }
            }
          },
          "updated_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date last updated",
            "format": "unixtime",
            "example": 1739201710547
          },
          "created_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date created",
            "format": "unixtime",
            "example": 1739201710547
          }
        }
      },
      "PostSetIdentifierPasswordBody": {
        "type": "object",
        "required": ["new_password"],
        "properties": {
          "new_password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "description": "New password that wants to be set",
            "example": "my-secure-password"
          },
          "force_set": {
            "type": "boolean",
            "description": "This flags control whether password will be set to an identifier which previously has no password data (`is_password_enabled=false`). If this API was called to an identifier identifier with no previous password available and flag is **not** `true`, it will throws the [`invalid_payload`](/docs/references/errors#invalid_payload) error."
          }
        }
      },
      "PostSetIdentifierPasswordResponseItem": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success response message",
            "example": "Password successfully updated"
          }
        }
      },
      "DeleteIdentifierResponseItem": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success response message",
            "example": "Identifier successfully deleted"
          }
        }
      },
      "GetSessionsResponseItem": {
        "type": "object",
        "required": [
          "id",
          "user",
          "status",
          "identifiers",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Random unique ID",
            "format": "nanoid",
            "example": "ses_a9d35175ea94b9367aa18237ca518d99"
          },
          "user": {
            "type": "object",
            "description": "User data of the current session",
            "properties": {
              "id": {
                "type": "string",
                "description": "Random unique ID",
                "format": "nanoid",
                "example": "idn_a9d35175ea94b9367aa18237ca518d99"
              },
              "external_id": {
                "type": "string",
                "description": "Tenant's defined unique ID",
                "format": "string",
                "example": "0194f092-a25a-700d-a4f6-8b50e865fd00",
                "minimum": 1,
                "maximum": 64
              }
            }
          },
          "status": {
            "description": "Sesison status",
            "$ref": "#/components/schemas/AccessClientUsersSessionsStatus"
          },
          "metadata": {
            "description": "Session's metadata",
            "$ref": "#/components/schemas/SessionActivityMetadata"
          },
          "identifiers": {
            "type": "array",
            "description": "List of identifiers of current user's identifiers",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Random unique ID",
                  "format": "nanoid",
                  "example": "idn_a9d35175ea94b9367aa18237ca518d99"
                },
                "provider": {
                  "description": "Current identifier's provider",
                  "$ref": "#/components/schemas/ClientUsersIdentifiersProvider"
                },
                "logo": {
                  "type": "string",
                  "format": "link",
                  "description": "Link to provider logo",
                  "example": "https://cdn.cakeauth.com/socials/apple.svg"
                },
                "value": {
                  "type": "string",
                  "description": "Identifier value (e.g., email or phone number)",
                  "example": "test@example.com"
                },
                "is_current": {
                  "type": "boolean",
                  "description": "Whether this identifier is the currently active one (used in the current session data)"
                },
                "is_password_enabled": {
                  "type": "boolean",
                  "description": "Whether a password is enabled for this identifier"
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Whether this identifier has been verified"
                },
                "contact_informations": {
                  "type": "array",
                  "description": "List of associated contact information",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Random unique ID for contact information"
                      },
                      "type": {
                        "description": "Type of contact information",
                        "$ref": "#/components/schemas/ClientUsersIdentifierContactInformationsType"
                      },
                      "value": {
                        "type": "string",
                        "description": "Contact information value (e.g., email address, phone number)"
                      },
                      "is_verified": {
                        "type": "boolean",
                        "description": "Whether the contact information has been verified"
                      }
                    },
                    "required": ["id", "type", "value", "is_verified"]
                  }
                },
                "updated_at": {
                  "type": "integer",
                  "description": "UNIX Timestamp of date last updated",
                  "format": "int64",
                  "example": 1739201710547
                },
                "created_at": {
                  "type": "integer",
                  "description": "UNIX Timestamp of date created",
                  "format": "int64",
                  "example": 1739201710547
                }
              },
              "required": [
                "id",
                "provider",
                "logo",
                "value",
                "is_current",
                "is_password_enabled",
                "is_verified",
                "contact_informations",
                "updated_at",
                "created_at"
              ]
            }
          },

          "expires_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date expired",
            "format": "unixtime",
            "example": 1739201710547
          },
          "revoked_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date revoked",
            "format": "unixtime",
            "example": 1739201710547
          },
          "updated_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date last updated",
            "format": "unixtime",
            "example": 1739201710547
          },
          "created_at": {
            "type": "integer",
            "description": "UNIX Timestamp of date created",
            "format": "unixtime",
            "example": 1739201710547
          }
        }
      },
      "PostCreateSessionBody": {},
      "PostCreateSessionResponseItem": {}
    },
    "responses": {
      "BadRequestErrorResponse": {
        "description": "Bad request error response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApiResponseWrapper" },
                {
                  "type": "object",
                  "properties": {
                    "data": { "type": "null" },
                    "status": { "example": 400 },
                    "error": {
                      "example": {
                        "url": "https://docs.cakeauth.com/docs/references/errors#bad_request",
                        "code": "bad_request",
                        "message": "Invalid payload"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "description": "Unauthorized response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApiResponseWrapper" },
                {
                  "type": "object",
                  "properties": {
                    "data": { "type": "null" },
                    "status": { "example": 401 },
                    "error": {
                      "example": {
                        "url": "https://docs.cakeauth.com/docs/references/errors#unauthorized",
                        "code": "unauthorized",
                        "message": "Unauthorized"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApiResponseWrapper" },
                {
                  "type": "object",
                  "properties": {
                    "data": { "type": "null" },
                    "status": { "example": 500 },
                    "error": {
                      "example": {
                        "url": "https://docs.cakeauth.com/docs/references/errors#internal_server_error",
                        "code": "internal_server_error",
                        "message": "Internal server error"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "PrivateKeyAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
